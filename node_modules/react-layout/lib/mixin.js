// Generated by CoffeeScript 1.10.0
var DIMENSIONS, LayoutMixin, React, assert, clone, getLayoutDef, guardLayoutContext, hasReactLayout, isNumber, layoutIsFixed, layoutIsFlex, layoutIsInherited, layoutIsOmitted, merge;

React = require('react');

merge = clone = require('xtend');

DIMENSIONS = ['height', 'width'];

LayoutMixin = {
  contextTypes: {
    layoutContext: React.PropTypes.object
  },
  childContextTypes: {
    layoutContext: React.PropTypes.object
  },
  getChildContext: function() {
    return {
      layoutContext: this.getLayoutContext()
    };
  },
  getLayoutContext: function() {
    var inherited;
    inherited = this.props.layoutContext || this.context.layoutContext;
    if (inherited != null) {
      return inherited;
    } else {
      return {
        width: isNumber(this.props.layoutWidth) ? this.props.layoutWidth : void 0,
        height: isNumber(this.props.layoutHeight) ? this.props.layoutHeight : void 0
      };
    }
  },
  getLocalLayout: function() {
    var def, layoutContext, local;
    local = {};
    layoutContext = this.getLayoutContext();
    guardLayoutContext(layoutContext);
    def = getLayoutDef(this);
    if (!def) {
      return local;
    }
    DIMENSIONS.forEach(function(dim) {
      if (def[dim]) {
        return local[dim] = layoutContext[dim];
      }
    });
    return local;
  },
  applyLayoutToChildren: function(children) {
    var parentLayout, precalc;
    parentLayout = this.getLayoutContext();
    guardLayoutContext(parentLayout);
    precalc = DIMENSIONS.reduce(function(precalc, dim) {
      precalc[dim] = {
        fixedSum: 0,
        flexChildren: 0
      };
      return precalc;
    }, {});
    React.Children.forEach(children, function(child) {
      var def;
      if (!child) {
        return;
      }
      def = getLayoutDef(child);
      if (!def) {
        return;
      }
      return DIMENSIONS.forEach(function(dim) {
        if (layoutIsFixed(def[dim])) {
          return precalc[dim].fixedSum += def[dim];
        } else if (layoutIsFlex(def[dim])) {
          return precalc[dim].flexChildren++;
        }
      });
    });
    return React.Children.map(children, function(child) {
      var def, layout;
      if (!(child != null ? child.props : void 0)) {
        return child;
      }
      layout = clone(parentLayout);
      def = getLayoutDef(child);
      if (def) {
        DIMENSIONS.forEach(function(dim) {
          var flexSizeForDimension;
          if (layoutIsFixed(def[dim])) {
            return layout[dim] = def[dim];
          } else if (layoutIsFlex(def[dim])) {
            flexSizeForDimension = (parentLayout[dim] - precalc[dim].fixedSum) / precalc[dim].flexChildren;
            return layout[dim] = flexSizeForDimension;
          }
        });
      }
      return React.cloneElement(child, {
        layoutContext: layout
      });
    });
  }
};

getLayoutDef = function(component) {
  var def;
  if (!hasReactLayout(component)) {
    return;
  }
  def = {
    height: component.props.layoutHeight,
    width: component.props.layoutWidth
  };
  if (def.height == null) {
    def.height = 'inherit';
  }
  if (def.width == null) {
    def.width = 'inherit';
  }
  return def;
};

guardLayoutContext = function(layoutContext) {
  assert(layoutContext, 'layoutContext');
  assert(layoutContext.height, 'layoutContext.height');
  return assert(layoutContext.width, 'layoutContext.width');
};

hasReactLayout = function(component) {
  var ref, ref1, ref2, ref3;
  return ((ref = component.props) != null ? ref.layoutHeight : void 0) || ((ref1 = component.props) != null ? ref1.layoutWidth : void 0) || component.hasReactLayout || ((ref2 = component.constructor) != null ? ref2.hasReactLayout : void 0) || ((ref3 = component.type) != null ? ref3.hasReactLayout : void 0);
};

layoutIsFixed = function(value) {
  return typeof value === 'number';
};

layoutIsFlex = function(value) {
  return value === 'flex';
};

layoutIsOmitted = function(value) {
  return value === 'omit';
};

layoutIsInherited = function(value) {
  return value === 'inherit' || !(layoutIsFixed(value) || layoutIsFlex(value) || layoutIsOmitted(value));
};

assert = function(value, name) {
  if (value == null) {
    throw new Error("missing " + name);
  }
};

isNumber = function(value) {
  return typeof value === 'number';
};

module.exports = LayoutMixin;
